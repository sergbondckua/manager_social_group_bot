from aiogram.utils.markdown import hbold, hcode, hitalic, text
from html import escape
from training_events.models import TrainingEvent

btn_cancel = text("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
btn_skip = text("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
btn_finish_training = text("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
btn_add_distance = text("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é")


def format_success_message(training: TrainingEvent, distances: list) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = [
        f"‚ú® {hbold('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')} ‚ú®",
        "",
        f"üè∑ {hbold('–ù–∞–∑–≤–∞:')} {escape(training.title)}",
    ]

    # –û–ø–∏—Å (—è–∫—â–æ —î)
    if training.description:
        message.append(f"üìã {hbold('–û–ø–∏—Å:')}\n{escape(training.description)}")

    # –ü–æ—Å—Ç–µ—Ä (—è–∫—â–æ —î)
    if training.poster:
        message.append(f"\nüñº {hbold('–ü–æ—Å—Ç–µ—Ä –¥–æ–¥–∞–Ω–æ')}")

    # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
    date_str = training.date.date().strftime("%d.%m.%Y")
    time_str = training.date.time().strftime("%H:%M")
    message.extend(
        [
            f"\nüìÖ {hbold('–î–∞—Ç–∞:')} {date_str}",
            f"üïí {hbold('–ß–∞—Å:')} {time_str}",
            f"üìç {hbold('–ú—ñ—Å—Ü–µ:')}\n{escape(training.location)}",
        ]
    )

    # –î–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    if distances:
        message.append(f"\nüìè {hbold('–î–∏—Å—Ç–∞–Ω—Ü—ñ—ó:')}")
        for distance in distances:
            distance_line = f"  ‚Ä¢ {distance.distance} –∫–º"

            # –£—á–∞—Å–Ω–∏–∫–∏
            participants = (
                "–Ω–µ–æ–±–º–µ–∂–µ–Ω–æ"
                if not distance.max_participants
                else f"–º–∞–∫—Å. {distance.max_participants}"
            )
            distance_line += f" | üë• {participants}"

            # –¢–µ–º–ø
            if distance.pace_min or distance.pace_max:
                pace = []
                if distance.pace_min:
                    pace.append(f"–≤—ñ–¥ {distance.pace_min}")
                if distance.pace_max:
                    pace.append(f"–¥–æ {distance.pace_max}")
                distance_line += f" | üèÉ {hitalic('—Ç–µ–º–ø:')} {' '.join(pace)}"

            # –ú–∞—Ä—à—Ä—É—Ç
            if distance.route_gpx:
                distance_line += " | üó∫ –º–∞—Ä—à—Ä—É—Ç"

            message.append(distance_line)

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
    creator_name = (
        training.created_by.get_full_name()
        or f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {training.created_by.telegram_id})"
    )
    message.extend(
        [
            f"\nüë§ {hbold('–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä:')} {escape(creator_name)}",
            f"üÜî {hbold('ID —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:')} {hcode(training.id)}",
        ]
    )

    return "\n".join(message)
