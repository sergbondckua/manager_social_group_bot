from aiogram.utils.markdown import hbold, hcode, hitalic, text
from html import escape
from training_events.models import TrainingEvent

btn_cancel = text("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
btn_skip = text("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
btn_finish_training = text("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
btn_add_distance = text("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é")

format_confirmation_message = text(
    "üéØ ",
    hbold("–î–∏—Å—Ç–∞–Ω—Ü—ñ—è {current_distance} –∫–º —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!"),
    "\n\n",
    "üìä ",
    hitalic("–°–ø–∏—Å–æ–∫ –¥–æ–¥–∞–Ω–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π:"),
    "\n",
    "{distances_text}",
    "\n\n",
    "üõ†Ô∏è ",
    hbold("–ù–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:"),
    "\n",
    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
)

format_invalid_file_message = text(
    "‚ùå " + hbold("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É!") + "\n\n",
    "üìÅ –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —É " + hbold("GPX") + " —Ñ–æ—Ä–º–∞—Ç—ñ\n",
    "‚ÑπÔ∏è "
    + "–¶–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç—Ä–µ–∫—ñ–≤ –∑ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤\n\n",
    "üîÑ "
    + "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É",
)


def format_success_message(training: TrainingEvent, distances: list) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = [
        f"‚ú® {hbold('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!')} ‚ú®",
        "",
        f"üè∑ {hbold('–ù–∞–∑–≤–∞:')} {escape(training.title)}",
    ]

    # –û–ø–∏—Å (—è–∫—â–æ —î)
    if training.description:
        message.append(f"üìã {hbold('–û–ø–∏—Å:')}\n{escape(training.description)}")

    # –ü–æ—Å—Ç–µ—Ä (—è–∫—â–æ —î)
    if training.poster:
        message.append(f"\nüñº {hbold('–ü–æ—Å—Ç–µ—Ä –¥–æ–¥–∞–Ω–æ')}")

    # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
    date_str = training.date.date().strftime("%d.%m.%Y")
    time_str = training.date.time().strftime("%H:%M")
    message.extend(
        [
            f"\nüìÖ {hbold('–î–∞—Ç–∞:')} {date_str}",
            f"üïí {hbold('–ß–∞—Å:')} {time_str}",
            f"üìç {hbold('–ú—ñ—Å—Ü–µ:')}\n{escape(training.location)}",
        ]
    )

    # –î–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    if distances:
        message.append(f"\nüìè {hbold('–î–∏—Å—Ç–∞–Ω—Ü—ñ—ó:')}")
        for distance in distances:
            distance_line = f"  ‚Ä¢ {distance.distance} –∫–º"

            # –£—á–∞—Å–Ω–∏–∫–∏
            participants = (
                "–Ω–µ–æ–±–º–µ–∂–µ–Ω–æ"
                if not distance.max_participants
                else f"–º–∞–∫—Å. {distance.max_participants}"
            )
            distance_line += f" | üë• {participants}"

            # –¢–µ–º–ø
            if distance.pace_min or distance.pace_max:
                pace = []
                if distance.pace_min:
                    pace.append(f"–≤—ñ–¥ {distance.pace_min}")
                if distance.pace_max:
                    pace.append(f"–¥–æ {distance.pace_max}")
                distance_line += f" | üèÉ {hitalic('—Ç–µ–º–ø:')} {' '.join(pace)}"

            # –ú–∞—Ä—à—Ä—É—Ç
            if distance.route_gpx:
                distance_line += " | üó∫ –º–∞—Ä—à—Ä—É—Ç"

            message.append(distance_line)

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
    creator_name = (
        training.created_by.get_full_name()
        or f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {training.created_by.telegram_id})"
    )
    message.extend(
        [
            f"\nüë§ {hbold('–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä:')} {escape(creator_name)}",
            f"üÜî {hbold('ID —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:')} {hcode(training.id)}",
        ]
    )

    return "\n".join(message)


def format_distances_list(distances: list) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π –∑ Markdown, –µ–º–æ–¥–∑—ñ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º."""
    distance_lines = []

    for d in distances:
        # –û—Å–Ω–æ–≤–Ω–∏–π –±–ª–æ–∫: –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è —Ç–∞ —É—á–∞—Å–Ω–∏–∫–∏
        distance_emoji = "üìè"
        distance_text = f"{distance_emoji} {hbold(d['distance'])} –∫–º"

        participants_emoji = "üë•"
        participants_text = (
            f"{participants_emoji} {hbold('–Ω–µ–æ–±–º–µ–∂–µ–Ω–æ')} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
            if d["max_participants"] == 0
            else f"{participants_emoji} –¥–æ {hbold(d['max_participants'])} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
        )

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –±–ª–æ–∫–∏: —Ç–µ–º–ø —Ç–∞ –º–∞—Ä—à—Ä—É—Ç
        pace_info = format_pace_info(d)
        route_info = format_route_info(d)  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó

        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        components = [
            text(distance_text, "‚Ä¢", participants_text),
            pace_info,
            route_info,
        ]

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –æ–±'—î–¥–Ω—É—î–º–æ
        filtered_components = [c for c in components if c]
        distance_lines.append("\n".join(filtered_components))

    return "\n\n".join(distance_lines)


def format_pace_info(distance_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä—É—î Markdown-—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ–º–ø –∑ –µ–º–æ–¥–∑—ñ"""
    pace_min = distance_data.get("pace_min")
    pace_max = distance_data.get("pace_max")

    if not pace_min and not pace_max:
        return ""

    # –ï–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ç–µ–º–ø—É
    emoji = "üèÉüí®" if pace_min and pace_max else "‚è±Ô∏è"

    parts = []
    if pace_min:
        parts.append(f"–≤—ñ–¥ {hbold(pace_min)}")
    if pace_max:
        parts.append(f"–¥–æ {hbold(pace_max)}")

    pace_range = " ".join(parts)
    return text(hitalic(f"{emoji} –¢–µ–º–ø: "), pace_range, hitalic(" —Ö–≤/–∫–º"))


def format_route_info(distance_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç –∑ –µ–º–æ–¥–∑—ñ."""
    if not distance_data.get("route_name"):
        return ""

    emoji = "üó∫Ô∏è"
    return text(hitalic(f"{emoji} –ú–∞—Ä—à—Ä—É—Ç: "), distance_data["route_name"])
