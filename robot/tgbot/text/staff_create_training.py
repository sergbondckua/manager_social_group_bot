from aiogram.utils.markdown import hbold, hcode, hitalic, text
from html import escape

from asgiref.sync import sync_to_async

from common.utils import clean_tag_message
from training_events.models import TrainingEvent

btn_cancel = text("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
btn_close = text("‚ùå –ü—Ä–∏–±—Ä–∞—Ç–∏")
btn_skip = text("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
btn_finish_training = text("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
btn_add_distance = text("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é")
btn_training_publish = text("üóû –ê–Ω–æ–Ω—Å—É–≤–∞—Ç–∏")
btn_training_delete = text("üóë –í–∏–¥–∞–ª–∏—Ç–∏")
btn_cancel_training = text("üõë –°–∫–∞—Å—É–≤–∞—Ç–∏ –∞–Ω–æ–Ω—Å–æ–≤–∞–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
btn_register_training = text("¬ÆÔ∏è –Ø, –±—É–¥—É!")

format_delete_confirmation = text(
    "‚ö†Ô∏è " + hbold("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n\n"),
    "üìå " + hbold("–ù–∞–∑–≤–∞: ") + "{training_title}\n",
    "üÜî " + hbold("ID: ") + "{training_id}\n",
    "üë• " + hbold("–£—á–∞—Å–Ω–∏–∫—ñ–≤: ") + "{participants_count}\n\n",
    "üî• " + hbold("–£–≤–∞–≥–∞: —Ü—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!"),
)

format_revoke_confirmation = text(
    "‚ö†Ô∏è " + hbold("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n\n"),
    "üìå " + hbold("–ù–∞–∑–≤–∞: ") + "{training_title}\n",
    "üÜî " + hbold("ID: ") + "{training_id}\n",
)

format_confirmation_message = text(
    "üéØ ",
    hbold("–î–∏—Å—Ç–∞–Ω—Ü—ñ—è {current_distance} –∫–º —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!\n\n"),
    "üìä " + hitalic("–°–ø–∏—Å–æ–∫ –¥–æ–¥–∞–Ω–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π: \n"),
    "{distances_text}\n\n",
    "üõ†Ô∏è " + hbold("–ù–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:\n\n"),
    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
)

format_training_cancellation_confirmation = text(
    f"‚úÖ " + hbold("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ¬´{training_title}¬ª —Å–∫–∞—Å–æ–≤–∞–Ω–æ!\n\n"),
    "üìä " + hitalic("–î–µ—Ç–∞–ª—ñ:\n"),
    "   ‚Ä¢ –î–∞—Ç–∞: {training_date}\n",
    "   ‚Ä¢ –£—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ: " + hbold("{participants_count}") + " –æ—Å–±.\n",
    "üì® " + hitalic("–í—Å—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"),
)

format_invalid_file_message = text(
    "‚ùå " + hbold("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É!") + "\n\n",
    "üìÅ –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —É " + hbold("GPX") + " —Ñ–æ—Ä–º–∞—Ç—ñ\n",
    "‚ÑπÔ∏è "
    + "–¶–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç—Ä–µ–∫—ñ–≤ –∑ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤\n\n",
    "üîÑ "
    + "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É",
)

format_training_cancellation_notice = text(
    "üö® " + hbold("–í–∞–∂–ª–∏–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è!\n\n"),
    "üòî "
    + hitalic("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ")
    + hbold("{training_title} ")
    + hitalic(", –Ω–∞ —è–∫–µ –≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ,\n"),
    "üìÖ " + hbold("–î–∞—Ç–∞: ") + "{training_date}\n\n",
    "‚ÄºÔ∏è–°–ö–ê–°–û–í–ê–ù–û‚ÄºÔ∏è\n\n",
    "üöß " + hbold("–ü—Ä–∏—á–∏–Ω–∞:") + " –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è\n\n",
    "üôè –í–∏–±–∞—á—Ç–µ –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ! –ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –ø—Ä–æ –Ω–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.",
)
format_revoke_training_error_detailed = text(
    hbold("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è\n"),
    hitalic("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏:"),
    "üèÉ‚Äç‚ôÄÔ∏è " + hbold("{training_title}"),
    "üìÖ " + hbold("{training_date}\n"),
    "‚ÑπÔ∏è " + hitalic("–ü—Ä–∏—á–∏–Ω–∞:"),
    "‚Ä¢ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –∞–Ω–æ–Ω—Å–æ–≤–∞–Ω–µ",
    "‚Ä¢ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤: {participants_count}\n",
    hbold("–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, —Å–ø–æ—á–∞—Ç–∫—É —Å–∫–∞—Å—É–π—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."),
    sep="\n",
)
format_training_info_template = text(
    hbold("{status} {title}"),
    "üìÖ " + hbold("{date}"),
    "üìç " + hbold("{location}"),
    "üÜî " + hbold("ID:") + " {training_id}",
    "‚öôÔ∏è " + hbold("–î–µ—Ç–∞–ª—ñ:") + " " + hcode("/get_training_{training_id}"),
    hitalic("===================="),
    sep="\n",
)
format_title_validation_error = text(
    hbold("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–∞–∑–≤–∏\n"),
    hitalic("–ù–∞–∑–≤–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º:\n"),
    "‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: " + hbold("{min_title_length}"),
    "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: " + hbold("{max_title_length}\n"),
    hitalic("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —â–µ —Ä–∞–∑:"),
    sep="\n",
)
format_description_prompt = text(
    hbold("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n"),
    hitalic("–ü—Ä–∏–∫–ª–∞–¥:"),
    "¬´–ì—Ä—É–ø–æ–≤–∞ –ø—Ä–æ–±—ñ–∂–∫–∞ –≤ –î–∞–Ω—ñ–≤—Å—å–∫–æ–º—É –ª—ñ—Å—ñ.",
    "–ú–∞—Ä—à—Ä—É—Ç –∑ –º–∞–ª—å–æ–≤–Ω–∏—á–∏–º–∏ –∫—Ä–∞—î–≤–∏–¥–∞–º–∏.¬ª\n",
    hitalic("–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å) /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É"),
    sep="\n",
)
format_location_error_template = text(
    hbold("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ü—è\n"),
    hitalic("–ú—ñ—Å—Ü–µ –∑—É—Å—Ç—Ä—ñ—á—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º:\n"),
    "‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: " + hbold("{min_location_length}") + " —Å–∏–º–≤–æ–ª—ñ–≤",
    "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: " + hbold("{max_location_length}") + " —Å–∏–º–≤–æ–ª—ñ–≤\n",
    hitalic("–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:"),
    hcode("–ó—É–ø–∏–Ω–∫–∞ —Å–∞–Ω–∞—Ç–æ—Ä—ñ–π ¬´–î–∞–Ω—ñ–≤—Å—å–∫–∏–π¬ª\n"),
    hitalic("–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –º—ñ—Å—Ü–µ —â–µ —Ä–∞–∑:"),
    sep="\n",
)
format_poster_prompt = text(
    hbold("üñº –î–æ–¥–∞–π—Ç–µ –ø–æ—Å—Ç–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"),
    hitalic("–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É"),
    sep="\n",
)


@sync_to_async
def format_success_message(training: TrainingEvent, distances: list) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    # –ü–æ—Å—Ç–µ—Ä (—è–∫—â–æ —î)
    poster_emoji = " | üñº" if training.poster else ""

    message = [
        f"üè∑ {hbold('–ù–∞–∑–≤–∞:')} {training.title}{poster_emoji}",
    ]

    # –û–ø–∏—Å (—è–∫—â–æ —î)
    if training.description:
        message.append(
            f"üìã {hbold('–û–ø–∏—Å:')} {clean_tag_message(training.description)}"
        )

    # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å
    date_str = training.date.date().strftime("%d.%m.%Y")
    time_str = training.date.time().strftime("%H:%M")
    message.extend(
        [
            f"\nüìÖ {hbold('–î–∞—Ç–∞:')} {date_str}",
            f"üïí {hbold('–ß–∞—Å:')} {time_str}",
            f"üìç {hbold('–ú—ñ—Å—Ü–µ:')} {escape(training.location)}",
        ]
    )

    # –î–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    if distances:
        message.append(f"\nüìè {hbold('–î–∏—Å—Ç–∞–Ω—Ü—ñ—ó:')}")
        for distance in distances:
            distance_line = f"  ‚Ä¢ {distance.distance} –∫–º"

            # –£—á–∞—Å–Ω–∏–∫–∏
            participants = (
                "–Ω–µ–æ–±–º–µ–∂–µ–Ω–æ"
                if not distance.max_participants
                else f"–º–∞–∫—Å. {distance.max_participants}"
            )
            distance_line += f" | üë• {participants}"

            # –¢–µ–º–ø
            if distance.pace_min or distance.pace_max:
                pace = []
                if distance.pace_min:
                    pace.append(f"–≤—ñ–¥ {distance.pace_min}")
                if distance.pace_max:
                    pace.append(f"–¥–æ {distance.pace_max}")
                distance_line += f" | üèÉ {hitalic('—Ç–µ–º–ø:')} {' '.join(pace)}"

            # –ú–∞—Ä—à—Ä—É—Ç
            if distance.route_gpx:
                distance_line += " | üó∫ –º–∞—Ä—à—Ä—É—Ç"

            message.append(distance_line)

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
    creator_name = (
        training.created_by.get_full_name()
        or f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {training.created_by.telegram_id})"
    )
    if training.registrations.count() > 0:
        registrations = (
            f"\nüë• {hbold('–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ')} "
            f"{training.registrations.count()} —É—á–∞—Å–Ω–∏–∫(–∞ / —ñ–≤)"
        )
    else:
        registrations = ""

    message.extend(
        [
            registrations,
            f"\nüë§ {hbold('–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä:')} {creator_name}",
            f"#Ô∏è‚É£ {hbold('–•–µ—à—Ç–µ–≥:')} #{training.id}—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        ]
    )

    return "\n".join(message)


def format_distances_list(distances: list) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π."""
    distance_lines = []

    for d in distances:
        # –û—Å–Ω–æ–≤–Ω–∏–π –±–ª–æ–∫: –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è —Ç–∞ —É—á–∞—Å–Ω–∏–∫–∏
        distance_emoji = "üìè"
        distance_text = f"{distance_emoji} {hbold(d['distance'])} –∫–º"

        participants_emoji = "üë•"
        participants_text = (
            f"{participants_emoji} {hbold('–Ω–µ–æ–±–º–µ–∂–µ–Ω–æ')} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
            if d["max_participants"] == 0
            else f"{participants_emoji} –¥–æ {hbold(d['max_participants'])} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
        )

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –±–ª–æ–∫–∏: —Ç–µ–º–ø —Ç–∞ –º–∞—Ä—à—Ä—É—Ç
        pace_info = format_pace_info(d)
        route_info = format_route_info(d)  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó

        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        components = [
            text(distance_text, "‚Ä¢", participants_text),
            pace_info,
            route_info,
        ]

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –æ–±'—î–¥–Ω—É—î–º–æ
        filtered_components = [c for c in components if c]
        distance_lines.append("\n".join(filtered_components))

    return "\n\n".join(distance_lines)


def format_pace_info(distance_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä—É—î Markdown-—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ–º–ø –∑ –µ–º–æ–¥–∑—ñ"""
    pace_min = distance_data.get("pace_min")
    pace_max = distance_data.get("pace_max")

    if not pace_min and not pace_max:
        return ""

    # –ï–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ç–µ–º–ø—É
    emoji = "üèÉüí®" if pace_min and pace_max else "‚è±Ô∏è"

    parts = []
    if pace_min:
        parts.append(f"–≤—ñ–¥ {hbold(pace_min)}")
    if pace_max:
        parts.append(f"–¥–æ {hbold(pace_max)}")

    pace_range = " ".join(parts)
    return text(hitalic(f"{emoji} –¢–µ–º–ø: "), pace_range, hitalic(" —Ö–≤/–∫–º"))


def format_route_info(distance_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç –∑ –µ–º–æ–¥–∑—ñ."""
    if not distance_data.get("route_name"):
        return ""

    emoji = "üó∫Ô∏è"
    return text(hitalic(f"{emoji} –ú–∞—Ä—à—Ä—É—Ç: "), distance_data["route_name"])
