import asyncio
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional

from aiogram import types, Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaDocument, InputMediaPhoto
from asgiref.sync import sync_to_async
from django.conf import settings
from django.core.exceptions import ValidationError
from django.db import transaction
from django.utils import timezone
from django.utils.timezone import make_aware

from profiles.models import ClubUser
from robot.tgbot.filters.staff import ClubStaffFilter
from robot.tgbot.keyboards import staff as kb
from robot.tgbot.misc import validators
from robot.tgbot.services import reg_training_service as rs
from robot.tgbot.services.staff_training_service import (
    create_poster_path,
    process_gpx_files_after_creation,
)
from robot.tgbot.states.staff import CreateTraining
from robot.tgbot.text import staff_create_training as mt
from training_events.models import TrainingEvent, TrainingDistance

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger("robot")

staff_router = Router()
staff_router.message.filter(ClubStaffFilter())

SKIP_AND_CANCEL_BUTTONS = kb.skip_and_cancel_keyboard()
CANCEL_BUTTON = kb.cancel_keyboard()


async def get_club_user(telegram_id: int) -> Optional[ClubUser]:
    """–û—Ç—Ä–∏–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫–ª—É–±—É –∑–∞ Telegram ID."""
    try:
        return await ClubUser.objects.aget(telegram_id=telegram_id)
    except ClubUser.DoesNotExist:
        return None


async def clear_state_and_notify(
    message: types.Message,
    state: FSMContext,
    text: str,
    prev_delete_message: bool = False,
    keyboard: types = None,
):
    """–û—á–∏—â—É—î —Å—Ç–∞–Ω —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    await state.clear()
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if prev_delete_message:
        await message.delete()
    await message.answer(text, reply_markup=keyboard)


@staff_router.message(F.text == mt.btn_cancel)
async def cancel_training_creation(message: types.Message, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É, —è–∫–∏–π –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        return

    await clear_state_and_notify(
        message,
        state,
        text="‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        keyboard=types.ReplyKeyboardRemove(),
    )


@staff_router.callback_query(F.data == "btn_close")
async def btn_close(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä–∏–≤–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–∏–¥–∞–ª—è—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    await callback.message.delete()
    return


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
@staff_router.message(Command("trainings"))
async def cmd_my_trainings(message: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    user_id = message.from_user.id
    club_user = await get_club_user(message.from_user.id)
    if not club_user:
        await message.bot.send_message(
            user_id,
            "‚ùå –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        )
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞
    @sync_to_async
    def get_trainings(user):
        return list(
            TrainingEvent.objects.filter(
                created_by=user,
                date__gte=timezone.now(),
                is_cancelled=False,
            ).order_by("date")[:10]
        )

    trainings = await get_trainings(club_user)

    if not trainings:
        await message.bot.send_message(
            user_id, "üìù –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–µ–º–∞—î –∞–±–æ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ."
        )
        return

    message_parts = ["üìã –í–∞—à—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:", ""]

    for training in trainings:
        status = "üîú" if training.date > timezone.now() else "‚úÖ"
        message_parts.append(
            mt.format_training_info_template.format(
                status=status,
                title=training.title,
                date=timezone.localtime(training.date).strftime(
                    "%d.%m.%Y %H:%M"
                ),
                location=training.location,
                training_id=training.id,
            )
        )
    await message.bot.send_message(
        user_id, "\n".join(message_parts), reply_markup=kb.btn_close()
    )


@staff_router.message(F.text.startswith("/get_training_"))
async def cmd_get_training(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "/get_training_" –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""

    training_id = message.text.split("_")[-1]
    training = await TrainingEvent.objects.select_related().aget(
        id=training_id
    )
    distances = [d async for d in training.distances.all()]

    if not training:
        await message.answer(
            "‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. "
            "–ü–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    msg = await mt.format_success_message(training, distances)

    await message.answer(
        msg,
        reply_markup=kb.create_training_publish_and_delete_keyboard(
            training.id
        ),
    )


@staff_router.message(Command("create_training"))
async def cmd_create_training(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "/create_training"."""

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞
    club_user = await get_club_user(message.from_user.id)
    if not club_user:
        await message.answer(
            "‚ùå –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ. "
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    await state.set_state(CreateTraining.waiting_for_title)
    await message.bot.send_message(
        chat_id=message.from_user.id,
        text="üè∑ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:",
        reply_markup=CANCEL_BUTTON,
    )


@staff_router.message(CreateTraining.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    title = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏
    if not validators.validate_title(title):
        await message.answer(
            mt.format_title_validation_error.format(
                min_title_length=validators.MIN_TITLE_LENGTH,
                max_title_length=validators.MAX_TITLE_LENGTH,
            )
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏
    if await TrainingEvent.objects.filter(title=title).aexists():
        await message.answer(
            f"üë≠ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –Ω–∞–∑–≤–æ—é '{title}' –≤–∂–µ —ñ—Å–Ω—É—î. "
            "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
        )
        return

    await state.update_data(title=title)
    await state.set_state(CreateTraining.waiting_for_description)
    await message.answer(
        text=mt.format_description_prompt,
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


@staff_router.message(
    CreateTraining.waiting_for_description,
    lambda message: message.text in {"/skip", mt.btn_skip},
)
async def skip_description(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    await state.update_data(description="")
    await state.set_state(CreateTraining.waiting_for_date)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:",
        reply_markup=CANCEL_BUTTON,
    )


@staff_router.message(CreateTraining.waiting_for_description)
async def process_training_description(
    message: types.Message, state: FSMContext
):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    await state.update_data(description=message.text.strip())
    await state.set_state(CreateTraining.waiting_for_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:",
        reply_markup=CANCEL_BUTTON,
    )


@staff_router.message(CreateTraining.waiting_for_date)
async def process_training_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    parsed_date = rs.parse_date(message.text.lstrip().rstrip())

    if not parsed_date:
        await message.answer(
            "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. "
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25.12.2025):"
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥–∞—Ç–∞ –Ω–µ –≤ –º–∏–Ω—É–ª–æ–º—É
    if (
        parsed_date.date()
        < make_aware(datetime.now().replace(tzinfo=None)).date()
    ):
        await message.answer(
            "–î–∞—Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∏–Ω—É–ª–æ–º—É. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É:"
        )
        return

    await state.update_data(date=parsed_date.strftime("%d.%m.%Y"))
    await state.set_state(CreateTraining.waiting_for_time)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–ú–ú:")


@staff_router.message(CreateTraining.waiting_for_time)
async def process_training_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    parsed_time = rs.parse_time(message.text.lstrip().rstrip())

    if not parsed_time:
        await message.answer(
            "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. "
            "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–ú–ú (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30):"
        )
        return

    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —á–∞—Å—É –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—ó –¥–∞—Ç–∏
    data = await state.get_data()
    training_date = datetime.strptime(data["date"], "%d.%m.%Y").date()
    training_datetime = datetime.combine(training_date, parsed_time.time())

    if training_datetime < datetime.now():
        await message.answer(
            "–ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∏–Ω—É–ª–æ–º—É. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å:"
        )
        return

    await state.update_data(time=parsed_time.strftime("%H:%M"))
    await state.set_state(CreateTraining.waiting_for_location)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ü–µ –∑—É—Å—Ç—Ä—ñ—á—ñ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:")


@staff_router.message(CreateTraining.waiting_for_location)
async def process_training_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ü—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    location = message.text.strip()

    if not validators.validate_location(location):
        await message.answer(
            text=mt.format_location_error_template.format(
                min_location_length=validators.MIN_LOCATION_LENGTH,
                max_location_length=validators.MAX_LOCATION_LENGTH,
            )
        )
        return

    await state.update_data(location=location)
    await state.set_state(CreateTraining.waiting_for_poster)
    await message.answer(
        text=mt.format_poster_prompt,
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


@staff_router.message(
    CreateTraining.waiting_for_poster,
    lambda message: message.text in {"/skip", mt.btn_skip},
)
async def skip_poster(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    await state.update_data(poster_file_id=None, distances=[])
    await state.set_state(CreateTraining.waiting_for_distance)
    await message.answer(
        "–¢–µ–ø–µ—Ä –¥–æ–¥–∞–º–æ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n"
        "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é (—É –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        reply_markup=CANCEL_BUTTON,
    )


@staff_router.message(CreateTraining.waiting_for_poster, F.photo)
async def process_training_poster(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    try:
        file_id = message.photo[-1].file_id
        await state.update_data(poster_file_id=file_id, distances=[])
        await state.set_state(CreateTraining.waiting_for_distance)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é (—É –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö):",
            reply_markup=CANCEL_BUTTON,
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä–∞: {e}")
        await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—Å—Ç–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@staff_router.message(CreateTraining.waiting_for_poster)
async def process_invalid_poster_message(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –Ω–µ —î —Ñ–æ—Ç–æ."""
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–µ—Ä—É –∞–±–æ /skip. "
        "–Ü–Ω—à—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è.",
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


@staff_router.message(CreateTraining.waiting_for_distance)
async def process_training_distance(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    try:
        distance_str = message.text.strip().replace(",", ".")
        distance = float(distance_str)

        if not validators.validate_distance(distance):
            await message.answer(
                "–î–∏—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ "
                f"{validators.MIN_DISTANCE} –∫–º —Ç–∞ –Ω–µ –±—ñ–ª—å—à–µ {validators.MAX_DISTANCE} –∫–º. "
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –¥—É–±–ª—é—î—Ç—å—Å—è –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è
        data = await state.get_data()
        existing_distances = [d["distance"] for d in data.get("distances", [])]
        if distance in existing_distances:
            await message.answer(
                f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è {distance} –∫–º –≤–∂–µ –¥–æ–¥–∞–Ω–∞. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é:"
            )
            return

        await state.update_data(current_distance=distance)
        await state.set_state(CreateTraining.waiting_for_max_participants)
        await message.answer(
            f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è {distance} –∫–º.\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó "
            "(–≤–≤–µ–¥—ñ—Ç—å 0 –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ):"
        )
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5 –∞–±–æ 10.5):"
        )


@staff_router.message(CreateTraining.waiting_for_max_participants)
async def process_max_participants(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤."""
    try:
        max_participants = int(message.text.strip())

        if not validators.validate_participants(max_participants):
            await message.answer(
                f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ {validators.MAX_PARTICIPANTS}. "
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return

        await state.update_data(current_max_participants=max_participants)
        await state.set_state(CreateTraining.waiting_for_pace_min)
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π (–ø–æ–≤—ñ–ª—å–Ω–∏–π) —Ç–µ–º–ø —É —Ñ–æ—Ä–º–∞—Ç—ñ –•–•:–°–° "
            "(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 07:30) –∞–±–æ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É:",
            reply_markup=SKIP_AND_CANCEL_BUTTONS,
        )
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ:"
        )


@staff_router.message(
    CreateTraining.waiting_for_pace_min,
    lambda message: message.text in {"/skip", mt.btn_skip},
)
async def skip_pace_min(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ–º–ø—É."""
    await state.update_data(current_pace_min=None)
    await state.set_state(CreateTraining.waiting_for_pace_max)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π (—à–≤–∏–¥–∫–∏–π) —Ç–µ–º–ø —É —Ñ–æ—Ä–º–∞—Ç—ñ –•–•:–°–° "
        "(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 03:30) –∞–±–æ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É:",
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


@staff_router.message(CreateTraining.waiting_for_pace_min)
async def process_pace_min(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ–º–ø—É."""
    pace_str = rs.parse_pace(message.text)

    if not validators.validate_pace(pace_str):
        await message.answer(
            "–¢–µ–º–ø –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º—ñ–∂ "
            f"{validators.MIN_PACE_SECONDS//60:02d}:{validators.MIN_PACE_SECONDS%60:02d} "
            f"—Ç–∞ {validators.MAX_PACE_SECONDS//60:02d}:{validators.MAX_PACE_SECONDS%60:02d} —Ö–≤/–∫–º. "
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(current_pace_min=pace_str)
    await state.set_state(CreateTraining.waiting_for_pace_max)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π (—à–≤–∏–¥–∫–∏–π) —Ç–µ–º–ø —É —Ñ–æ—Ä–º–∞—Ç—ñ –•–•:–°–° "
        "(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 03:30) –∞–±–æ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É:",
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


@staff_router.message(
    CreateTraining.waiting_for_pace_max,
    lambda message: message.text in {"/skip", mt.btn_skip},
)
async def skip_pace_max(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ–º–ø—É."""
    await state.update_data(current_pace_max=None)
    await state.set_state(CreateTraining.waiting_for_route_gpx)
    await message.answer(
        "–î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ .GPX, –∞–±–æ /skip:",
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


@staff_router.message(CreateTraining.waiting_for_pace_max)
async def process_pace_max(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ–º–ø—É."""
    pace_str = rs.parse_pace(message.text)

    if not validators.validate_pace(pace_str):
        await message.answer(
            "–¢–µ–º–ø –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º—ñ–∂ "
            f"{validators.MIN_PACE_SECONDS//60:02d}:{validators.MIN_PACE_SECONDS%60:02d} "
            f"—Ç–∞ {validators.MAX_PACE_SECONDS//60:02d}:{validators.MAX_PACE_SECONDS%60:02d} —Ö–≤/–∫–º. "
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø –Ω–µ –º–µ–Ω—à–∏–π –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π
    data = await state.get_data()
    if data.get("current_pace_min"):
        min_pace = datetime.strptime(data["current_pace_min"], "%M:%S").time()
        max_pace = datetime.strptime(pace_str, "%M:%S").time()

        min_seconds = min_pace.minute * 60 + min_pace.second
        max_seconds = max_pace.minute * 60 + max_pace.second

        if max_seconds > min_seconds:
            await message.answer(
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π (—à–≤–∏–¥–∫–∏–π) —Ç–µ–º–ø ({pace_str}) –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ "
                f"–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π (–ø–æ–≤—ñ–ª—å–Ω–∏–π) ({data['current_pace_min']}). "
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return

    await state.update_data(current_pace_max=pace_str)
    await state.set_state(CreateTraining.waiting_for_route_gpx)
    await message.answer(
        "–î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ .GPX, –∞–±–æ /skip:",
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


@staff_router.message(
    CreateTraining.waiting_for_route_gpx,
    lambda message: message.text in {"/skip", mt.btn_skip},
)
async def skip_route_gpx(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –º–∞—Ä—à—Ä—É—Ç—É."""
    await state.update_data(
        current_route_gpx=None, current_source_filename_gpx=None
    )
    await save_current_distance_and_ask_next(message, state)


@staff_router.message(
    CreateTraining.waiting_for_route_gpx, F.document.file_name.endswith(".gpx")
)
async def process_route_gpx(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —Ñ–∞–π–ª—É –º–∞—Ä—à—Ä—É—Ç—É."""
    data = await state.get_data()
    existing_route_gpx = [
        d.get("source_filename_gpx") for d in data.get("distances", [])
    ]

    filename = message.document.file_name
    if filename in existing_route_gpx:
        await message.answer(
            f"–¶–µ–π —Ñ–∞–π–ª {filename} –º–∞—Ä—à—Ä—É—Ç—É –≤–∂–µ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –¥–æ —Ü—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. "
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É:"
        )
        return

    await state.update_data(
        current_route_gpx=message.document.file_id,
        current_source_filename_gpx=filename,
    )
    await message.answer("–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.", reply_markup=CANCEL_BUTTON)
    await save_current_distance_and_ask_next(message, state)


@staff_router.message(CreateTraining.waiting_for_route_gpx)
async def invalid_route_gpx(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É –º–∞—Ä—à—Ä—É—Ç—É."""
    await message.answer(
        mt.format_invalid_file_message,
        reply_markup=SKIP_AND_CANCEL_BUTTONS,
    )


async def save_current_distance_and_ask_next(
    message: types.Message, state: FSMContext
):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –¥–æ–¥–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É."""
    data = await state.get_data()
    distances = data.get("distances", [])

    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –¥–æ —Å–ø–∏—Å–∫—É
    current_distance = {
        "distance": data["current_distance"],
        "max_participants": data["current_max_participants"],
        "pace_min": data.get("current_pace_min"),
        "pace_max": data.get("current_pace_max"),
        "route_gpx": data.get("current_route_gpx"),
        "source_filename_gpx": data.get("current_source_filename_gpx"),
    }
    distances.append(current_distance)

    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ–¥–∞–Ω—ñ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    distances_text = mt.format_distances_list(distances)
    keyboard = kb.add_distance_or_finish_keyboard()

    await state.update_data(distances=distances)
    await message.answer(
        mt.format_confirmation_message.format(
            current_distance=current_distance["distance"],
            distances_text=distances_text,
        ),
        reply_markup=keyboard,
    )


@staff_router.callback_query(F.data == "add_distance")
async def add_another_distance(
    callback: types.CallbackQuery, state: FSMContext
):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è —â–µ –æ–¥–Ω—ñ—î—ó –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó."""

    # –û—á–∏—â—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    data = await state.get_data()
    current_keys = [key for key in data.keys() if key.startswith("current_")]

    for key in current_keys:
        data.pop(key, None)

    await state.set_data(data)
    await state.set_state(CreateTraining.waiting_for_distance)

    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é (—É –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö):"
    )
    await callback.answer()


@staff_router.callback_query(F.data == "finish_training")
async def finish_training_creation(
    callback: types.CallbackQuery, state: FSMContext
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    await callback.message.edit_text("‚è≥ –°—Ç–≤–æ—Ä—é—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...")
    await callback.bot.send_chat_action(
        callback.message.chat.id, action="typing"
    )
    await create_training_final(callback.message, state)
    await callback.answer()


async def create_training_final(message: types.Message, state: FSMContext):
    """–§—ñ–Ω–∞–ª—å–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—Å—ñ—Ö –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π."""
    data = await state.get_data()

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        club_user = await get_club_user(message.chat.id)
        if not club_user:
            await clear_state_and_notify(
                message,
                state,
                "‚ùå –ü–æ–º–∏–ª–∫–∞: –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ. "
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            )
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ datetime
        training_datetime = make_aware(
            datetime.combine(
                datetime.strptime(data["date"], "%d.%m.%Y").date(),
                datetime.strptime(data["time"], "%H:%M").time(),
            )
        )

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä–∞
        poster_path = None
        if data.get("poster_file_id"):
            poster_path = await create_poster_path(
                club_user.id, data["poster_file_id"], message.bot
            )

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        @sync_to_async
        def create_training_with_distances():
            with transaction.atomic():
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
                training_event = TrainingEvent.objects.create(
                    title=data["title"],
                    description=data.get("description", ""),
                    date=training_datetime,
                    location=data["location"],
                    poster=(
                        poster_path.replace(
                            str(settings.MEDIA_ROOT), ""
                        ).lstrip("/")
                        if poster_path
                        else None
                    ),
                    created_by=club_user,
                )

                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
                created_distance_records = []
                for distance_data in data["distances"]:
                    # –û–±—Ä–æ–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç—É GPX
                    training_distance = TrainingDistance.objects.create(
                        training=training_event,
                        distance=distance_data["distance"],
                        max_participants=distance_data["max_participants"],
                        pace_min=distance_data.get("pace_min"),
                        pace_max=distance_data.get("pace_max"),
                        route_gpx=None,  # –í—Å—Ç–∞–Ω–æ–≤–∏–º–æ –ø—ñ–∑–Ω—ñ—à–µ
                        route_gpx_map=None,  # –í—Å—Ç–∞–Ω–æ–≤–∏–º–æ –ø—ñ–∑–Ω—ñ—à–µ
                    )
                    created_distance_records.append(
                        {
                            "distance_obj": training_distance,
                            "distance_data": distance_data,
                        }
                    )

                return training_event, created_distance_records

        # –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        training, created_distances_info = (
            await create_training_with_distances()
        )

        # –û–±—Ä–æ–±–ª—è—î–º–æ GPX —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –≤ –ë–î
        created_distances = await process_gpx_files_after_creation(
            created_distances_info,
            club_user.id,
            training_datetime,
            message.bot,
        )

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        success_message = await mt.format_success_message(
            training, created_distances
        )
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        keyboard = kb.create_training_publish_and_delete_keyboard(training.id)

        # –û—á–∏—â–∞—î–º–æ FSM —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await clear_state_and_notify(
            message=message,
            state=state,
            text=f"‚ú® –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {training.title} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ‚ú®",
            prev_delete_message=True,
            keyboard=types.ReplyKeyboardRemove(),
        )
        await message.answer(success_message, reply_markup=keyboard)

        logger.info(
            "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è %s —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º %s",
            training.id,
            club_user.id,
        )

    except ValidationError as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: %s", e)
        await clear_state_and_notify(
            message,
            state,
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É.",
        )
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: %s", e)
        await clear_state_and_notify(
            message,
            state,
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. "
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        )


@staff_router.callback_query(F.data.startswith("delete_training_"))
async def confirm_delete_training(callback: types.CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""

    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ callback –¥–∞–Ω–∏—Ö
        training_id = int(callback.data.split("_")[-1])

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        training = await TrainingEvent.objects.select_related().aget(
            id=training_id
        )

        await callback.message.edit_text(
            text=mt.format_delete_confirmation.format(
                training_id=training.id,
                training_title=training.title,
                participants_count=await training.registrations.acount(),
            ),
            reply_markup=kb.confirmation_keyboard(
                f"delete_confirm_{training_id}"
            ),
        )
    except TrainingEvent.DoesNotExist:
        logger.error("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–∏ÃÜ–¥–µ–Ω–æ")
        await callback.answer("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: %s", e)
        await callback.answer(
            "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", show_alert=True
        )
    finally:
        await callback.answer()


@staff_router.callback_query(F.data.startswith("delete_confirm_"))
async def execute_delete_training(callback: types.CallbackQuery):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    try:
        # –†–æ–∑–±–∏–≤–∞—î–º–æ callback_data: delete_confirm_123_yes/no
        training_id, action = callback.data.split("_")[-2:]
        training_id = int(training_id)

        if action != "yes":
            await callback.message.edit_text("üôÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ –ë–î
        training = await TrainingEvent.objects.select_related().aget(
            id=training_id
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏
        if (
            training.date > timezone.now()
            and await training.registrations.acount() > 0
            and not training.is_cancelled
        ):
            await callback.message.edit_text(
                text=mt.format_revoke_training_error_detailed.format(
                    training_date=timezone.localtime(training.date).strftime(
                        "%d.%m.%Y %H:%M"
                    ),
                    training_title=training.title,
                    participants_count=await training.registrations.acount(),
                ),
                reply_markup=kb.revoke_training_keyboard(training_id),
            )
            return

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        await training.adelete()

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.edit_text(
            text=f"üóë –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ¬´{training.title}¬ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!\n",
            reply_markup=None,
        )
    except TrainingEvent.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {e}")
        await callback.answer(
            f"üö´ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}", show_alert=True
        )
    finally:
        await callback.answer()


async def notify_participants(
    bot: Bot, participants: list, training: TrainingEvent
):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —É—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º"""
    for user in participants:
        try:
            chat_id = user
            if training.poster:
                relative_path = training.poster.name.lstrip("/")
                poster_path = Path(settings.MEDIA_ROOT) / relative_path
                photo_file = FSInputFile(poster_path)
                await bot.send_chat_action(
                    chat_id=chat_id, action="upload_photo"
                )
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_file,
                    caption=mt.format_training_cancellation_notice.format(
                        training_title=training.title,
                        training_date=timezone.localtime(
                            training.date
                        ).strftime("%d %B %Y, %H:%M"),
                    ),
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=mt.format_training_cancellation_notice.format(
                        training_title=training.title,
                        training_date=timezone.localtime(
                            training.date
                        ).strftime("%d %B %Y, %H:%M"),
                    ),
                )
        except ValueError as e:
            logger.error("!–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: %s", e, exc_info=True)


@staff_router.callback_query(F.data.startswith("revoke_training_"))
async def confirm_revoke_training(callback: types.CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ—ñ
        training_id = callback.data.split("_")[-1]
        training_id = int(training_id)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        training = await TrainingEvent.objects.select_related().aget(
            id=training_id
        )

        await callback.message.edit_text(
            text=mt.format_revoke_confirmation.format(
                training_id=training.id,
                training_title=training.title,
            ),
            reply_markup=kb.confirmation_keyboard(
                f"revoke_confirm_{training_id}"
            ),
        )
    except TrainingEvent.DoesNotExist:
        logger.error("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–∏ÃÜ–¥–µ–Ω–æ")
        await callback.answer("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: %s", e)
        await callback.answer(
            "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è", show_alert=True
        )
    finally:
        await callback.answer()


@staff_router.callback_query(F.data.startswith("revoke_confirm_"))
async def execute_revoke_training(callback: types.CallbackQuery):
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ—ñ
        training_id, action = callback.data.split("_")[-2:]
        training_id = int(training_id)

        if action != "yes":
            await callback.message.edit_text(
                text="üôå –°–∫–∞—Å–æ–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ",
                reply_markup=None,
            )
            return

        @sync_to_async()
        def revoke_training(
            training_event_id: int,
        ) -> tuple[TrainingEvent, list[int]]:
            """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""
            training_event = TrainingEvent.objects.select_related().get(
                id=training_event_id
            )

            participant_registrations = [
                reg.participant.telegram_id
                for reg in training_event.registrations.all()
            ]

            training_event.is_cancelled = True
            training_event.save()
            return training_event, participant_registrations

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        training, participants = await revoke_training(training_id)

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —É—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º
        await notify_participants(callback.bot, participants, training)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.edit_text(
            text=mt.format_training_cancellation_confirmation.format(
                training_title=training.title,
                participants_count=len(participants),
                training_date=timezone.localtime(training.date).strftime(
                    "%d.%m.%Y, %H:%M"
                ),
            ),
            reply_markup=None,
        )
    except TrainingEvent.DoesNotExist:
        logger.error("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–∏ÃÜ–¥–µ–Ω–æ")
        await callback.answer("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: %s", e, exc_info=True)
        await callback.answer(
            "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", show_alert=True
        )
    finally:
        await callback.answer()


@staff_router.callback_query(F.data.startswith("publish_training_"))
async def publish_training(callback: types.CallbackQuery):
    """–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""

    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID
        training_id = callback.data.split("_")[-1]
        training_id = int(training_id)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        training = await TrainingEvent.objects.select_related().aget(
            id=training_id
        )
        distances = [distance async for distance in training.distances.all()]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ
        if training.is_cancelled:
            await callback.answer(
                "‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ä–∞–Ω—ñ—à–µ –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!", show_alert=True
            )
            return

        # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        if training.poster:
            photo_file = FSInputFile(training.poster.path)
            await callback.message.bot.send_photo(
                chat_id=settings.DEFAULT_CHAT_ID,
                photo=photo_file,
                caption=f"{await mt.format_success_message(training, distances)}",
                reply_markup=kb.register_training_keyboard(training_id),
            )
        else:
            await callback.message.bot.send_message(
                chat_id=settings.DEFAULT_CHAT_ID,
                text=f"{await mt.format_success_message(training, distances)}",
                reply_markup=kb.register_training_keyboard(training_id),
            )

        # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π
        gpx_group = []
        img_group = []

        # –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤—É —Ñ–∞–π–ª—É
        async def wait_for_file_exist(
            file_path: Path, max_wait_time: int = 60
        ):
            """TODO"""
            wait_interval = 2  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
            total_waited = 0

            while total_waited < max_wait_time:
                if file_path.exists():
                    return

                # –ü–æ—á–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                await asyncio.sleep(wait_interval)
                total_waited += wait_interval

            raise TimeoutError(f"–§–∞–π–ª–∏ –Ω–µ –∑'—è–≤–∏–ª–∏—Å—è –∑–∞ {max_wait_time} —Å–µ–∫—É–Ω–¥")

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó (—è–∫—â–æ —î GPX)
        has_gpx = any(distance.route_gpx for distance in distances)
        find_png_msg = None
        if has_gpx:
            find_png_msg = await callback.message.bot.send_message(
                chat_id=settings.DEFAULT_CHAT_ID,
                text="üîç –ü–æ—à—É–∫ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—ñ–≤...",
            )

            # –û–±—Ä–æ–±–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π
            for num, distance in enumerate(distances):
                if not distance.route_gpx:
                    continue

                # –î–æ–¥–∞–≤–∞–Ω–Ω—è GPX
                gpx_file = FSInputFile(distance.route_gpx.path)
                gpx_group.append(
                    InputMediaDocument(
                        media=gpx_file,
                        caption=f"–ú–∞—Ä—à—Ä—É—Ç {distance.distance} –∫–º\n"
                        f"#{training.id}—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è #{int(distance.distance)}–∫–º",
                    )
                )

                # –û–±—Ä–æ–±–∫–∞ PNG
                png_path = Path(distance.route_gpx.path).with_suffix(".png")
                try:
                    await wait_for_file_exist(png_path)
                    png_file = FSInputFile(png_path)
                    img_group.append(
                        InputMediaPhoto(
                            media=png_file,
                            caption=(
                                f"–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—É {distance.distance} –∫–º"
                                if num == 0
                                else None
                            ),
                        )
                    )
                except TimeoutError:
                    logger.warning("PNG –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: %s", png_path)
                    await find_png_msg.edit_text(
                        text="üòÆ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
                    )

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if find_png_msg:
                try:
                    await find_png_msg.delete()
                except Exception as e:
                    logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", e)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø
            if gpx_group:
                await callback.message.bot.send_media_group(
                    chat_id=settings.DEFAULT_CHAT_ID,
                    media=gpx_group,
                )
            if img_group:
                await callback.message.bot.send_media_group(
                    chat_id=settings.DEFAULT_CHAT_ID,
                    media=img_group,
                )

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await callback.message.edit_text(
                text=f"‚ôªÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {training.title} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!",
                reply_markup=None,
            )
    except TrainingEvent.DoesNotExist:
        logger.error("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–∏ÃÜ–¥–µ–Ω–æ")
        await callback.answer("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ñÃà —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: %s", e)
        await callback.answer(
            "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ñÃà —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", show_alert=True
        )
    finally:
        await callback.answer()
