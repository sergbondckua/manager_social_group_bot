import logging
from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from profiles.models import ClubUser
from robot.tgbot.filters.member import ClubMemberFilter
from robot.tgbot.keyboards import member as kb
from robot.tgbot.states.member import TrainingCommentStates
from robot.tgbot.text import member_template as mt
from training_events.models import (
    TrainingEvent,
    TrainingRating,
    TrainingComment,
)

rating_comment_router = Router()
rating_comment_router.message.filter(ClubMemberFilter())

logger = logging.getLogger("robot")


@rating_comment_router.callback_query(F.data == "btn_close")
async def btn_close(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä–∏–≤–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–∏–¥–∞–ª—è—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    await callback.message.delete()
    return


@rating_comment_router.callback_query(F.data.startswith("rate_training_"))
async def process_training_rating(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –æ—Ü—ñ–Ω–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""

    # –†–æ–∑–±–∏—Ä–∞—î–º–æ callback_data rate_training_123_5
    training_id, rating = callback.data.split("_")[-2:]
    training_id = int(training_id)
    rating = int(rating)

    try:
        training = await TrainingEvent.objects.aget(id=training_id)
        participant = await ClubUser.objects.aget(
            telegram_id=callback.from_user.id
        )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ü—ñ–Ω–∫—É –≤ –ë–î
        await TrainingRating.objects.aupdate_or_create(
            training=training,
            participant=participant,
            defaults={"rating": rating},
        )

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
        await callback.answer(f"–î—è–∫—É—é –∑–∞ –≤–∞—à—É –æ—Ü—ñ–Ω–∫—É: {'‚≠ê' * rating}")

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –æ—Ü—ñ–Ω–∫—É
        await callback.message.edit_text(
            text=mt.rating_confirmation_template.format(
                title=f"{training.title} - {training.location}",
                rating=f"{'‚≠ê' * rating}",
            ),
            reply_markup=kb.add_comment_keyboard(training_id),
        )

    except TrainingEvent.DoesNotExist:
        await callback.answer("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–∏ÃÜ–¥–µ–Ω–æ!", show_alert=True)
    except Exception as e:
        logger.error(" –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ—Ü—ñ–Ω–∫–∏: %s", e)
        await callback.answer(
            "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ—Ü—ñ–Ω–∫–∏", show_alert=True
        )
    finally:
        await callback.answer()


@rating_comment_router.callback_query(F.data.startswith("comment_training_"))
async def request_training_comment(
        callback: types.CallbackQuery, state: FSMContext
):
    """–ó–∞–ø–∏—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""

    training_id = int(callback.data.split("_")[-1])

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(training_id=training_id)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    await state.set_state(TrainingCommentStates.waiting_for_comment)

    await callback.message.edit_text(
        "üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:"
    )


@rating_comment_router.message(TrainingCommentStates.waiting_for_comment)
async def process_training_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è."""

    if not isinstance(message.text, str):
        await message.answer("üìù –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä —Ç–µ–∫—Å—Ç–æ–º:")
        return

    data = await state.get_data()
    training_id = data.get("training_id")
    try:
        training = await TrainingEvent.objects.aget(id=training_id)
        participant = await ClubUser.objects.aget(
            telegram_id=message.from_user.id
        )
        user = message.from_user.full_name or message.from_user.username
        owner_id = await sync_to_async(
            lambda: training.created_by.telegram_id
        )()
        rating = await TrainingRating.objects.aget(
            training=training, participant=participant
        )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ –ë–î
        await TrainingComment.objects.aupdate_or_create(
            training=training,
            participant=participant,
            defaults={"comment": message.text},
        )
        await message.answer(
            mt.rating_confirmation_template.format(
                title=f"{training.title} - {training.location}",
                rating=f"{'‚≠ê' * rating.rating}",
            )
        )
        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É
        await message.bot.send_message(
            chat_id=owner_id,
            text=mt.new_comment_template.format(
                title=f"{training.title} - {training.location}",
                comment=message.text,
                participant=user,
                training_id=training.id,
                rating=f"{'‚≠ê' * rating.rating}",
            ),
        )

    except TrainingEvent.DoesNotExist:
        await message.answer("‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–∏ÃÜ–¥–µ–Ω–æ!", show_alert=True)
        return
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ: %s", e, exc_info=True)
        await message.answer(
            "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ", show_alert=True
        )
    await state.clear()
