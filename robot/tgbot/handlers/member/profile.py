import logging
from datetime import datetime
from typing import List, Dict

from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from django.utils import timezone

from profiles.models import ClubUser
from robot.tgbot.keyboards.member import contact_keyboard, cancel_keyboard
from robot.tgbot.services.member_service import update_user_field
from robot.tgbot.states.member import ProfileStates
import robot.tgbot.text.member_template as mt

logger = logging.getLogger("robot")
profile_router = Router()

# ================= –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ü–û–õ–Ü–í =================
# –ö–æ–∂–Ω–µ –ø–æ–ª–µ –º—ñ—Å—Ç–∏—Ç—å —É—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
FIELD_CONFIGS = [
    {
        "name": "phone_number",  # –ù–∞–∑–≤–∞ –ø–æ–ª—è –≤ –º–æ–¥–µ–ª—ñ ClubUser
        "request_text": mt.msg_phone,  # –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        "keyboard": contact_keyboard,  # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        "validation": lambda msg: (
            msg.contact is not None and msg.contact.user_id == msg.from_user.id
        ),  # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        "processor": lambda msg: f"+{msg.contact.phone_number.lstrip('+')}",  # –û–±—Ä–æ–±–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è
        "error_text": "–•–∏–±–Ω—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é –∑–Ω–∏–∑—É üëá",  # –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
    },
    {
        "name": "data_of_birth",
        "request_text": mt.msg_dob,
        "keyboard": cancel_keyboard,
        "validation": lambda msg: validate_dob(
            msg.text
        ),  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        "processor": lambda msg: datetime.strptime(
            msg.text, "%d.%m.%Y"
        ).date(),
        "error_text": "‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –¥–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM.YYYY",
    },
]


def validate_dob(text: str) -> bool:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î:
    - –ö–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É DD.MM.YYYY
    - –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É
    """
    try:
        dob = datetime.strptime(text, "%d.%m.%Y").date()
        return dob < timezone.now().date()
    except ValueError:
        return False


# ================= –ë–ê–ó–û–í–Ü –§–£–ù–ö–¶–Ü–á =================


async def get_user_or_error(
    user_id: int, message: types.Message
) -> ClubUser | None:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        return await ClubUser.objects.aget(telegram_id=user_id)
    except ClubUser.DoesNotExist:
        logger.error(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return None


async def get_required_fields(user: ClubUser) -> List[Dict]:
    """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ–ª—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î FIELD_CONFIGS –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤.
    """
    return [
        config
        for config in FIELD_CONFIGS
        if not getattr(user, config["name"])  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—î
    ]


# ================= –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ =================


# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
@profile_router.message(lambda message: message.text == mt.btn_yes)
async def handle_yes(message: types.Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    user = await get_user_or_error(message.from_user.id, message)
    if not user:
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏
    required_fields = await get_required_fields(user)

    if not required_fields:
        await message.answer(
            "‚ÑπÔ∏è –í—Å—ñ –¥–∞–Ω—ñ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
    await state.set_data({"required_fields": required_fields})
    await process_next_field(message, state)


async def process_next_field(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –ø–µ—Ä–µ—Ö—ñ–¥ –º—ñ–∂ –ø–æ–ª—è–º–∏ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è"""
    data = await state.get_data()
    required_fields = data.get("required_fields", [])

    if not required_fields:
        # –£—Å—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ - –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å
        await message.answer(
            "‚úÖ –í—Å—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ!",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()
        return

    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ –ø–æ–ª–µ –∑—ñ —Å–ø–∏—Å–∫—É —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç
    current_field = required_fields[0]
    await message.answer(
        current_field["request_text"],
        reply_markup=current_field[
            "keyboard"
        ](),  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    )
    await state.set_state(ProfileStates.waiting_field_input)


@profile_router.message(ProfileStates.waiting_field_input)
async def process_field_input(message: types.Message, state: FSMContext):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤"""

    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if message.text == mt.btn_cancel:
        await handle_cancel(message, state)
        return

    data = await state.get_data()
    required_fields = data.get("required_fields", [])

    if not required_fields:
        await state.clear()
        return

    current_field = required_fields[0]

    # === –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–ê–ù–ò–• ===
    if not current_field["validation"](message):
        await message.answer(current_field["error_text"])
        return

    # === –û–ë–†–û–ë–ö–ê –ó–ù–ê–ß–ï–ù–ù–Ø ===
    try:
        processed_value = current_field["processor"](message)
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–ª—è %s: %s", current_field["name"], e)
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö")
        return

    # === –û–ù–û–í–õ–ï–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–• ===
    user = await get_user_or_error(message.from_user.id, message)
    if not user:
        await state.clear()
        return

    try:
        await update_user_field(user, current_field["name"], processed_value)
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è %s: %s", current_field["name"], e)
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
        return

    # === –ü–ï–†–ï–•–Ü–î –î–û –ù–ê–°–¢–£–ü–ù–û–ì–û –ü–û–õ–Ø ===

    # –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ –ø–æ–ª–µ –∑—ñ —Å–ø–∏—Å–∫—É
    remaining_fields = required_fields[1:]

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤
    await state.update_data(required_fields=remaining_fields)

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—è
    await process_next_field(message, state)


# ================= –î–û–î–ê–¢–ö–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò =================


# –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–º–æ–≤–∏
@profile_router.message(lambda message: message.text == mt.btn_no)
async def handle_no(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–º–æ–≤–∏ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –¥–∞–Ω—ñ"""
    await message.answer(
        "‚ùå –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –ø—ñ–∑–Ω—ñ—à–µ —á–µ—Ä–µ–∑ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç.",
        reply_markup=types.ReplyKeyboardRemove(),
    )


# –û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
@profile_router.message(lambda message: message.text == mt.btn_cancel)
async def handle_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É"""

    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–®–∫–æ–¥–∞, —â–æ –í–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.",
        reply_markup=types.ReplyKeyboardRemove(),
    )


# ================= –ü–†–ò–ö–õ–ê–î –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–û–ì–û –ü–û–õ–Ø =================
# –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–æ–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤ FIELD_CONFIGS:
#
# {
#     'name': 'email',
#     'request_text': "üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à email:",
#     'keyboard': cancel_keyboard,
#     'validation': lambda msg: '@' in msg.text and '.' in msg.text.split('@')[-1],
#     'processor': lambda msg: msg.text.strip().lower(),
#     'error_text': "‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email"
# }
