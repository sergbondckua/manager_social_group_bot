import logging
from datetime import datetime

from aiogram import Router, F, types
from aiogram.filters import Command
from asgiref.sync import sync_to_async
from django.utils.timezone import make_aware

from profiles.models import ClubUser
from robot.tgbot.keyboards import user as kb
from robot.tgbot.text import user_template as mt
from training_events.models import (
    TrainingEvent,
    TrainingRegistration,
    TrainingDistance,
)

reg_training_router = Router()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger("robot")


@reg_training_router.callback_query(F.data == "btn_close")
async def btn_close(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä–∏–≤–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–∏–¥–∞–ª—è—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    await callback.message.delete()
    return


async def get_username(comeback: types.CallbackQuery | types.Message):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    username = (
        f"@{comeback.from_user.username}"
        if comeback.from_user.username
        else ""
    )
    return username


async def get_full_name(
    comeback: types.CallbackQuery | types.Message, participant: ClubUser
):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not participant.first_name or not participant.last_name:
        return comeback.from_user.full_name
    else:
        return f"{participant.first_name} {participant.last_name}"


async def send_creator_training_notification(
    training: TrainingEvent, message: types.Message, text: str
):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.

    Args:
        training (TrainingEvent): –ü–æ–¥—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.
        message (types.Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞.
        text (str): –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    owner_id = await sync_to_async(lambda: training.created_by.telegram_id)()
    logger.info("–ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É %s", owner_id)

    await message.bot.send_message(
        chat_id=owner_id,
        text=text,
    )


@reg_training_router.callback_query(F.data.startswith("register_training_"))
async def register_training(callback: types.CallbackQuery):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
    user_id = callback.from_user.id
    user_full_name = callback.from_user.full_name
    training_id = int(callback.data.split("_")[-1])

    try:
        training = await TrainingEvent.objects.select_related().aget(
            id=training_id
        )
        participant = await ClubUser.objects.aget(telegram_id=user_id)
    except (TrainingEvent.DoesNotExist, ClubUser.DoesNotExist):
        await callback.answer(
            text="üîç –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ
    if training.is_cancelled:
        await callback.answer(
            text="‚ö†Ô∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!",
            show_alert=True,
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∏ÃÜ—à–ª–æ
    if training.date < make_aware(datetime.now().replace(tzinfo=None)):
        await callback.answer(
            text="‚ö†Ô∏è –¶–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–±—É–ª–æ—Å—è!",
            show_alert=True,
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    existing_registration = await TrainingRegistration.objects.filter(
        training=training, participant=participant
    ).aexists()
    if existing_registration:
        await callback.answer(
            text="‚ö†Ô∏è –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!",
            show_alert=True,
        )
        return

    # –Ø–∫—â–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–∞—î –±—ñ–ª—å—à–µ –æ–¥–Ω—ñ—î—ó –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    if await training.distances.acount() > 1:
        distances = []
        async for d in training.distances.all():
            distances.append(
                {
                    "distance": d.distance,
                    "training_id": training_id,
                    "distance_id": d.id,
                }
            )

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π
        await callback.message.bot.send_message(
            chat_id=user_id,
            text=mt.format_distance_selection_template.format(
                title=training.title,
                date=training.date.strftime("%d.%m.%Y üïë %H:%M"),
                location=training.location,
            ),
            reply_markup=kb.distance_keyboard(distances),
        )
        return

    # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è - —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –≤—ñ–¥—Ä–∞–∑—É
    distance: TrainingDistance = await training.distances.afirst()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
    if distance.max_participants != 0:
        if await training.registrations.acount() >= distance.max_participants:
            await callback.answer(
                text="‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞!",
                show_alert=True,
            )
            return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    await TrainingRegistration.objects.acreate(
        training=training, participant=participant, distance=distance
    )

    logger.info(
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s (ID: %s) –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è %s",
        user_full_name or "",
        user_id,
        training.title,
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    await callback.message.bot.send_message(
        chat_id=user_id,
        text=mt.format_success_registration_template.format(
            participant=await get_full_name(callback, participant),
            title=training.title,
            distance=distance.distance,
            date=training.date.strftime("%d.%m.%Y üïë %H:%M"),
            location=training.location,
        ),
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    msg = mt.format_registration_template.format(
        participant=await get_full_name(callback, participant),
        username=await get_username(callback),
        title=training.title,
        date=training.date.strftime("%d.%m.%Y üïë %H:%M"),
        location=training.location,
        distance=distance.distance,
    )
    await send_creator_training_notification(training, callback.message, msg)


@reg_training_router.callback_query(F.data.startswith("distance_"))
async def register_for_distance(callback: types.CallbackQuery):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é"""
    user_id = callback.from_user.id
    user_full_name = callback.from_user.full_name

    # –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ –∑ callback_data: distance_123_1
    training_id, distance_id = callback.data.split("_")[-2:]

    try:
        training = await TrainingEvent.objects.aget(id=training_id)
        distance = await training.distances.aget(id=distance_id)
        participant = await ClubUser.objects.aget(telegram_id=user_id)
    except (TrainingEvent.DoesNotExist, ClubUser.DoesNotExist):
        await callback.answer(
            text="üîç –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –∞–±–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
            show_alert=True,
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∏ÃÜ—à–ª–æ
    if training.date < make_aware(datetime.now().replace(tzinfo=None)):
        await callback.answer(
            text="‚ö†Ô∏è –¶–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–±—É–ª–æ—Å—è!",
            show_alert=True,
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ
    if training.is_cancelled:
        await callback.answer(
            text="‚ö†Ô∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!",
            show_alert=True,
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤
    if distance.max_participants != 0:
        if await training.registrations.acount() >= distance.max_participants:
            await callback.answer(
                text="‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–∞ —Ü—é –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞!",
                show_alert=True,
            )
            return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    existing_registration = await TrainingRegistration.objects.filter(
        training=training, participant=participant
    ).aexists()
    if existing_registration:
        await callback.answer(
            text="‚ö†Ô∏è –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!",
            show_alert=True,
        )
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    await TrainingRegistration.objects.acreate(
        training=training, participant=participant, distance=distance
    )

    logger.info(
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s (ID: %s) –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è %s, –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è %s km",
        user_full_name or "",
        user_id,
        training.title,
        distance.distance,
    )

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    await callback.message.delete()

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    await callback.message.bot.send_message(
        chat_id=user_id,
        text=mt.format_success_registration_template.format(
            participant=await get_full_name(callback, participant),
            title=training.title,
            distance=distance.distance,
            date=training.date.strftime("%d.%m.%Y üïë %H:%M"),
            location=training.location,
        ),
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É –ø—Ä–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    msg = mt.format_registration_template.format(
        participant=await get_full_name(callback, participant),
        username=await get_username(callback),
        title=training.title,
        date=training.date.strftime("%d.%m.%Y üïë %H:%M"),
        location=training.location,
        distance=distance.distance,
    )
    await send_creator_training_notification(training, callback.message, msg)


@reg_training_router.message(F.text.startswith("/unreg_training_"))
async def unregister_training(message: types.Message):
    """–ê–Ω—É–ª—é—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    training_id = int(message.text.split("_")[-1])

    try:
        training = await TrainingEvent.objects.aget(id=training_id)
        participant = await ClubUser.objects.aget(telegram_id=user_id)
    except (TrainingEvent.DoesNotExist, ClubUser.DoesNotExist):
        await message.bot.send_message(
            chat_id=user_id,
            text="‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
        )
        return

    # –®—É–∫–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    try:
        registration = await TrainingRegistration.objects.aget(
            training=training, participant=participant
        )
        await registration.adelete()

        logger.info(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s (ID: %s) —Å–∫–∞—Å—É–≤–∞–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è %s",
            user_full_name or "",
            user_id,
            training.title,
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å–æ–≤–∞–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        await message.bot.send_message(
            chat_id=user_id,
            text=mt.format_unregister_confirmation.format(
                title=training.title,
                date=training.date.strftime('%d.%m.%Y üïë %H:%M')
            )
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ —Å–∫–∞—Å–æ–≤–∞–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        msg = mt.format_unregister_template.format(
            title=training.title,
            date=training.date.strftime("%d.%m.%Y üïë %H:%M"),
            participant_name=await get_full_name(message, participant),
            username=await get_username(message),
        )
        await send_creator_training_notification(training, message, msg)

    except TrainingRegistration.DoesNotExist:
        await message.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –í–∏ –Ω–µ –±—É–ª–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –Ω–∞ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!",
        )


# @reg_training_router.callback_query(F.data == "my_registrations")
@reg_training_router.message(Command("my_trainings"))
async def show_my_registrations(message: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id

    try:
        participant = await ClubUser.objects.aget(telegram_id=user_id)
    except ClubUser.DoesNotExist:
        await message.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
        )
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    registrations = []
    async for reg in (
        TrainingRegistration.objects.select_related("training", "distance")
        .filter(
            participant=participant,
            training__date__gte=make_aware(datetime.now().replace(tzinfo=None)),
            training__is_cancelled=False,
        )
        .order_by("training__date")
    ):
        registrations.append(reg)

    if not registrations:
        await message.bot.send_message(
            chat_id=user_id,
            text="üìã –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.",
        )
        return

    text = "üìã –í–∞—à—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:\n\n"
    for reg in registrations:
        text += mt.format_my_reg_training.format(
            title=reg.training.title,
            date=reg.training.date.strftime("%d.%m.%Y üïë %H:%M"),
            location=reg.training.location,
            distance=reg.distance.distance,
            created_at=reg.created_at.strftime("%d.%m.%Y üïë %H:%M"),
            training_id=reg.training.id,
        )

    await message.bot.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=kb.btn_close_keyboard(),
    )
