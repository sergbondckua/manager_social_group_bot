import uuid
from datetime import timedelta

from django.core.validators import FileExtensionValidator
from django.db import models
from django.utils import timezone
from django.utils.timezone import localtime

from common.models import BaseModel
from profiles.models import ClubUser


class TrainingEvent(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"""

    def get_upload_path(self, filename):
        """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω—å–æ–≥–æ"""
        file_extension = filename.split(".")[-1]
        new_filename = f"{uuid.uuid4().hex}.{file_extension}"
        return f"trainings/{self.created_by.id}/images/{new_filename}"

    title = models.CharField(
        verbose_name="–ù–∞–∑–≤–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", max_length=200, unique=True
    )
    description = models.TextField(
        verbose_name="–û–ø–∏—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", blank=True, null=True
    )
    date = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ —Ç–∞ —á–∞—Å", help_text="–î–∞—Ç–∞ —Ç–∞ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
    )
    location = models.CharField(
        verbose_name="–ú—ñ—Å—Ü–µ", max_length=300, help_text="–ú—ñ—Å—Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
    )

    poster = models.ImageField(
        verbose_name="–ü–æ—Å—Ç–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        null=True,
        blank=True,
        validators=[
            FileExtensionValidator(
                allowed_extensions=["jpg", "jpeg", "png", "svg", "webp"]
            )
        ],
        upload_to=get_upload_path,
    )
    created_by = models.ForeignKey(
        verbose_name="–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä",
        to=ClubUser,
        on_delete=models.CASCADE,
        related_name="created_trainings",
    )
    is_cancelled = models.BooleanField(verbose_name="–°–∫–∞—Å–æ–≤–∞–Ω–æ", default=False)
    cancellation_reason = models.TextField(
        verbose_name="–ü—Ä–∏—á–∏–Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è", blank=True
    )

    def __str__(self):
        local_date = localtime(
            self.date
        )  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω—É —á–∞—Å–æ–≤—É –∑–æ–Ω—É
        distances = ", ".join(
            [f"{d.distance} –∫–º" for d in self.available_distances]
        )
        return (
            f"{self.title} - {local_date.strftime('%d %B %Y %H:%M')}: "
            f"{self.location}, {distances}"
        )

    @property
    def is_past(self):
        return self.date < timezone.now()

    @property
    def is_soon(self):
        now = timezone.now()
        return now < self.date < (now + timedelta(hours=24))

    @property
    def participant_count(self):
        return self.registrations.count()

    @property
    def has_available_slots(self):
        if self.distances.max_participants == 0:  # –Ω–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            return True
        return self.registrations.count() < self.distances.max_participants

    @property
    def available_distances(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π"""
        return self.distances.all().order_by("distance")

    class Meta:
        ordering = ["date"]
        verbose_name = "üèÉ‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
        verbose_name_plural = "üèÉ‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"


class TrainingDistance(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π —É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö"""

    def get_upload_path(self, filename: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω—å–æ–≥–æ"""

        if self.training and self.training.created_by:
            file_extension = filename.split(".")[-1]
            new_filename = (
                f"{self.distance}km_"
                f"{self.training.date.strftime('%d%B%Y_%H%M')}.{file_extension}"
            )
            return (
                f"trainings/{self.training.created_by.id}/gpx/{new_filename}"
            )
        return f"trainings/unknown/gpx/{filename}"

    training = models.ForeignKey(
        verbose_name="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        to=TrainingEvent,
        on_delete=models.CASCADE,
        related_name="distances",
    )
    distance = models.FloatField(
        verbose_name="–î–∏—Å—Ç–∞–Ω—Ü—ñ—è", help_text="–î–∏—Å—Ç–∞–Ω—Ü—ñ—è –≤ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö"
    )
    pace_min = models.TimeField(
        verbose_name="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø",
        null=True,
        blank=True,
        help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø (—Ö–≤/–∫–º)",
    )
    pace_max = models.TimeField(
        verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø",
        null=True,
        blank=True,
        help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø (—Ö–≤/–∫–º)",
    )
    max_participants = models.IntegerField(
        verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤",
        default=0,
        help_text="0 –æ–∑–Ω–∞—á–∞—î –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å",
    )
    route_gpx = models.FileField(
        verbose_name="–ú–∞—Ä—à—Ä—É—Ç",
        upload_to=get_upload_path,
        validators=[FileExtensionValidator(allowed_extensions=["gpx"])],
        null=True,
        blank=True,
        help_text="GPX —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç—É: .gpx",
    )

    def __str__(self):

        name = "".join(
            s[0].upper() for s in self.training.title.split(" ") if s.isalpha()
        )
        return f"{self.distance} –∫–º - {name}"

    class Meta:
        ordering = ["distance"]
        unique_together = ("training", "distance")
        verbose_name = "Ô∏èüìè –î–∏—Å—Ç–∞–Ω—Ü—ñ—è"
        verbose_name_plural = "üìè –î–∏—Å—Ç–∞–Ω—Ü—ñ—ó"


class TrainingRegistration(BaseModel):
    training = models.ForeignKey(
        verbose_name="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        to=TrainingEvent,
        on_delete=models.CASCADE,
        related_name="registrations",
    )
    distance = models.ForeignKey(
        verbose_name="–î–∏—Å—Ç–∞–Ω—Ü—ñ—è",
        to=TrainingDistance,
        on_delete=models.CASCADE,
        related_name="registrations",
    )
    participant = models.ForeignKey(
        verbose_name="–£—á–∞—Å–Ω–∏–∫",
        to=ClubUser,
        on_delete=models.CASCADE,
        related_name="registrations",
    )
    attendance_confirmed = models.BooleanField(
        verbose_name="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ",
        default=False,
        help_text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ",
    )
    actual_attendance = models.BooleanField(
        verbose_name="–§–∞–∫—Ç–∏—á–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å",
        null=True,
        blank=True,
        help_text="–§–∞–∫—Ç–∏—á–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å",
    )
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
    expected_pace = models.IntegerField(
        verbose_name="–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–º–ø",
        null=True,
        blank=True,
        help_text="–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–º–ø –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –∫—ñ–ª–æ–º–µ—Ç—Ä",
    )
    notes = models.TextField(
        blank=True, null=True, help_text="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–æ—Ç–∞—Ç–∫–∏ —É—á–∞—Å–Ω–∏–∫–∞"
    )

    def __str__(self):
        return f"{self.training.title} - {self.participant.username}"

    class Meta:
        unique_together = ("training", "participant")
        verbose_name = "üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é"
        verbose_name_plural = "üßë‚Äçü§ù‚Äçüßë –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ"
