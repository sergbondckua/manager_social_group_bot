import logging
import os
import uuid
from datetime import timedelta

from django.conf import settings
from django.core.files.base import ContentFile
from django.core.validators import (
    FileExtensionValidator,
    MinValueValidator,
    MaxValueValidator,
)
from django.db import models
from django.utils import timezone
from django.utils.timezone import localtime

from common.models import BaseModel
from profiles.models import ClubUser
from robot.tasks import visualize_gpx

logger = logging.getLogger(__name__)


class TrainingEvent(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å"""

    def get_upload_path(self, filename):
        """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω—å–æ–≥–æ"""
        file_extension = filename.split(".")[-1]
        new_filename = f"{uuid.uuid4().hex}.{file_extension}"
        return f"trainings/{self.created_by.id}/images/{new_filename}"

    title = models.CharField(
        verbose_name="–ù–∞–∑–≤–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", max_length=100, unique=True
    )
    description = models.TextField(
        verbose_name="–û–ø–∏—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", blank=True, null=True
    )
    date = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ —Ç–∞ —á–∞—Å", help_text="–î–∞—Ç–∞ —Ç–∞ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
    )
    location = models.CharField(
        verbose_name="–ú—ñ—Å—Ü–µ", max_length=150, help_text="–ú—ñ—Å—Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
    )

    poster = models.ImageField(
        verbose_name="–ü–æ—Å—Ç–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        null=True,
        blank=True,
        validators=[
            FileExtensionValidator(
                allowed_extensions=["jpg", "jpeg", "png", "svg", "webp"]
            )
        ],
        upload_to=get_upload_path,
    )
    created_by = models.ForeignKey(
        verbose_name="–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä",
        to=ClubUser,
        on_delete=models.CASCADE,
        related_name="created_trainings",
    )
    is_cancelled = models.BooleanField(verbose_name="–°–∫–∞—Å–æ–≤–∞–Ω–æ", default=False)
    is_feedback_sent = models.BooleanField(
        default=False,
        verbose_name="–û—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ",
        help_text="–ß–∏ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.",
    )
    cancellation_reason = models.TextField(
        verbose_name="–ü—Ä–∏—á–∏–Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è", blank=True
    )

    def __str__(self):
        local_date = localtime(
            self.date
        )  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω—É —á–∞—Å–æ–≤—É –∑–æ–Ω—É
        distances = ", ".join(
            [f"{d.distance} –∫–º" for d in self.available_distances]
        )
        return (
            f"{self.title} - {local_date.strftime('%d %B %Y %H:%M')}: "
            f"{self.location}, {distances}"
        )

    @property
    def is_past(self):
        return self.date < timezone.now()

    @property
    def is_soon(self):
        now = timezone.now()
        return now < self.date < (now + timedelta(hours=24))

    @property
    def participant_count(self):
        return self.registrations.count()

    @property
    def has_available_slots(self):
        if self.distances.max_participants == 0:  # –Ω–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            return True
        return self.registrations.count() < self.distances.max_participants

    @property
    def available_distances(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π"""
        return self.distances.all().order_by("distance")

    class Meta:
        ordering = ["date"]
        verbose_name = "üëüÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
        verbose_name_plural = "üëü –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"


class TrainingDistance(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π —É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è—Ö"""

    def get_upload_path(self, filename: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω—å–æ–≥–æ"""

        if self.training and self.training.created_by:
            file_extension = filename.split(".")[-1]
            new_filename = (
                f"{self.distance}km_"
                f"{self.training.date.strftime('%d%B%Y_%H%M')}.{file_extension}"
            )
            return (
                f"trainings/{self.training.created_by.id}/gpx/{new_filename}"
            )
        return f"trainings/unknown/gpx/{filename}"

    training = models.ForeignKey(
        verbose_name="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        to=TrainingEvent,
        on_delete=models.CASCADE,
        related_name="distances",
    )
    distance = models.FloatField(
        verbose_name="–î–∏—Å—Ç–∞–Ω—Ü—ñ—è", help_text="–î–∏—Å—Ç–∞–Ω—Ü—ñ—è –≤ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö"
    )
    pace_min = models.TimeField(
        verbose_name="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø",
        null=True,
        blank=True,
        help_text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø (—Ö–≤/–∫–º)",
    )
    pace_max = models.TimeField(
        verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø",
        null=True,
        blank=True,
        help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ–º–ø (—Ö–≤/–∫–º)",
    )
    max_participants = models.IntegerField(
        verbose_name="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤",
        default=0,
        help_text="0 –æ–∑–Ω–∞—á–∞—î –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å",
    )
    route_gpx = models.FileField(
        verbose_name="–ú–∞—Ä—à—Ä—É—Ç",
        upload_to=get_upload_path,
        validators=[FileExtensionValidator(allowed_extensions=["gpx"])],
        null=True,
        blank=True,
        help_text="GPX —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç—É: .gpx",
    )
    route_gpx_map = models.ImageField(
        verbose_name="–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç—É",
        upload_to=get_upload_path,
        max_length=255,
        validators=[
            FileExtensionValidator(
                allowed_extensions=["jpg", "jpeg", "png", "svg", "webp"]
            )
        ],
        null=True,
        blank=True,
        help_text="–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç—É: .jpg, .jpeg, .png, .svg, .webp",
    )

    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—É"""

        # –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–∫—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ ID —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ GPX —Ñ–∞–π–ª
        super().save(*args, **kwargs)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if self.route_gpx and not self.route_gpx_map:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ GPX —Ñ–∞–π–ª—É
                gpx_path = self.route_gpx.path

                # –°—Ç–≤–æ—Ä—é—î–º–æ —à–ª—è—Ö –¥–ª—è PNG —Ñ–∞–π–ª—É (–∑–∞–º—ñ–Ω—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–∞ .png)
                png_path = os.path.splitext(gpx_path)[0] + ".png"

                # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é, –ø–µ—Ä–µ–¥–∞—é—á–∏ —à–ª—è—Ö –¥–µ –∑–±–µ—Ä–µ–≥—Ç–∏ PNG
                visualization_success = visualize_gpx.delay(gpx_path, png_path)

                if visualization_success and os.path.exists(png_path):
                    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                    # –í–∏–¥–∞–ª—è—î–º–æ MEDIA_ROOT –∑ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —à–ª—è—Ö—É

                    relative_path = os.path.relpath(
                        png_path, settings.MEDIA_ROOT
                    )

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –≤ –ø–æ–ª–µ route_gpx_map
                    self.route_gpx_map = relative_path

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–∫—Ç –∑–Ω–æ–≤—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –ø–æ–ª–µ–º route_gpx_map
                    super().save()

            except Exception as e:
                logger.error(
                    "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—É –¥–ª—è –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó %s: %s",
                    self.id,
                    e,
                )

    def __str__(self):
        name = "".join(
            s[0].upper() for s in self.training.title.split(" ") if s.isalpha()
        )
        return f"{self.distance} –∫–º - {name}_{self.training.id}"

    class Meta:
        ordering = ["distance"]
        unique_together = ("training", "distance")
        verbose_name = "Ô∏èüìè –î–∏—Å—Ç–∞–Ω—Ü—ñ—è"
        verbose_name_plural = "üìè –î–∏—Å—Ç–∞–Ω—Ü—ñ—ó"


class TrainingRegistration(BaseModel):
    training = models.ForeignKey(
        verbose_name="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        to=TrainingEvent,
        on_delete=models.CASCADE,
        related_name="registrations",
    )
    distance = models.ForeignKey(
        verbose_name="–î–∏—Å—Ç–∞–Ω—Ü—ñ—è",
        to=TrainingDistance,
        on_delete=models.CASCADE,
        related_name="registrations",
    )
    participant = models.ForeignKey(
        verbose_name="–£—á–∞—Å–Ω–∏–∫",
        to=ClubUser,
        on_delete=models.CASCADE,
        related_name="registrations",
    )
    attendance_confirmed = models.BooleanField(
        verbose_name="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ",
        default=False,
        help_text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—á–∞—Å—Ç—ñ",
    )
    actual_attendance = models.BooleanField(
        verbose_name="–§–∞–∫—Ç–∏—á–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å",
        null=True,
        blank=True,
        help_text="–§–∞–∫—Ç–∏—á–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å",
    )
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
    expected_pace = models.IntegerField(
        verbose_name="–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–º–ø",
        null=True,
        blank=True,
        help_text="–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ–º–ø –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –∫—ñ–ª–æ–º–µ—Ç—Ä",
    )
    notes = models.TextField(
        blank=True, null=True, help_text="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–æ—Ç–∞—Ç–∫–∏ —É—á–∞—Å–Ω–∏–∫–∞"
    )

    def __str__(self):
        return f"{self.training.title} - {self.participant.username}"

    class Meta:
        unique_together = ("training", "participant")
        verbose_name = "üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é"
        verbose_name_plural = "üßë‚Äçü§ù‚Äçüßë –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ"


class TrainingRating(BaseModel):
    training = models.ForeignKey(
        verbose_name="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        to=TrainingEvent,
        on_delete=models.CASCADE,
        related_name="ratings",
    )
    participant = models.ForeignKey(
        verbose_name="–£—á–∞—Å–Ω–∏–∫",
        to=ClubUser,
        on_delete=models.CASCADE,
        related_name="ratings",
    )
    rating = models.IntegerField(
        verbose_name="–†–µ–π—Ç–∏–Ω–≥",
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        help_text="–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å–Ω–∏–∫–∞ –≤—ñ–¥ 1 –¥–æ 10",
    )

    def __str__(self):
        return (
            f"{self.training.title} - "
            f"{self.participant.get_full_name() or self.participant.username}: "
            f"{self.rating}/5"
        )

    class Meta:
        unique_together = ("training", "participant")
        verbose_name = "üåü –†–µ–π—Ç–∏–Ω–≥"
        verbose_name_plural = "üåü –†–µ–π—Ç–∏–Ω–≥–∏"


class TrainingComment(BaseModel):
    training = models.ForeignKey(
        verbose_name="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è",
        to=TrainingEvent,
        on_delete=models.CASCADE,
        related_name="comments",
    )
    participant = models.ForeignKey(
        verbose_name="–£—á–∞—Å–Ω–∏–∫",
        to=ClubUser,
        on_delete=models.CASCADE,
        related_name="comments",
    )
    comment = models.TextField(
        verbose_name="–ö–æ–º–µ–Ω—Ç–∞—Ä",
        help_text="–ö–æ–º–µ–Ω—Ç–∞—Ä —É—á–∞—Å–Ω–∏–∫–∞",
    )
    is_public = models.BooleanField(
        default=True, help_text="–ß–∏ –≤–∏–¥–∏–º–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä —ñ–Ω—à–∏–º —É—á–∞—Å–Ω–∏–∫–∞–º"
    )

    def __str__(self):
        return (
            f"{self.training.title} - "
            f"{self.participant.get_full_name() or self.participant.username}"
        )

    class Meta:
        verbose_name = "üí¨ –í—ñ–¥–≥—É–∫"
        verbose_name_plural = "üí¨ –í—ñ–¥–≥—É–∫–∏"
        ordering = ["-created_at"]
