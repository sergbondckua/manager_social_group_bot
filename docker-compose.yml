services:
  web:
    build: .
    container_name: web_msg_bot
    command: bash -c "
      ./manage.py collectstatic --noinput &&
      ./manage.py makemigrations &&
      ./manage.py migrate  &&
      gunicorn core.asgi:application
        --workers 4
        --worker-class uvicorn.workers.UvicornWorker
        --bind 0.0.0.0:8000
      "
    restart: always
    env_file:
      - .env
    volumes:
      - ./:/app
      - ./static:/app/static
      - ./media:/app/media
#    ports:
#      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - default_network
      - proxy-global-network  # Підключення до глобальної мережі
    environment:
      - VIRTUAL_HOST=club.crossrunche.com
      - VIRTUAL_PORT=8000

  db:
    image: postgres:alpine
    container_name: postgres_msg_bot
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - default_network

  pg_admin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_msg_bot
    restart: always
    env_file:
      - .env
    ports:
      - "5050:5050"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - default_network
      - proxy-global-network  # Підключення до глобальної мережі
    environment:
      - VIRTUAL_HOST=pgadmin.crossrunche.com
      - VIRTUAL_PORT=5050

  redis:
    image: redis:alpine
    container_name: redis_msg_bot
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - default_network

  #  nginx:
  #    build:
  #      dockerfile: ./Dockerfile
  #      context: ./nginx/
  #    container_name: nginx_msg_bot
  #    #    command: nginx -g "daemon off;"
  #    restart: always
  #    ports:
  #      - "80:80"
  ##      - "443:443"
  #    volumes:
  #      - ./static:/app/static
  #      - ./media:/app/media
  ##      - letsencrypt_volume:/etc/letsencrypt
  ##      - certbot_webroot_volume:/var/www/certbot
  #    depends_on:
  #      - web
  ##      - certbot
  #    networks:
  #      - default_network

  #  certbot:
  #    image: certbot/certbot:latest
  #    container_name: certbot_msg_bot
  #    restart: unless-stopped
  #    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot -d club1.crossrunche.com --agree-tos --email admin@fregi.pp.ua --non-interactive --renew-by-default; sleep 12h & wait $${!}; done;'
  #    volumes:
  #      - letsencrypt_volume:/etc/letsencrypt
  #      - certbot_webroot_volume:/var/www/certbot
  #    networks:
  #      - default_network

  celery_worker:
    build: .
    container_name: celery_worker_msg_bot
    command: celery -A core worker --loglevel=info
    restart: always
    depends_on:
      - redis
      - db
      - web
    volumes:
      - ./:/app
    networks:
      - default_network

  celery_beat:
    build: .
    container_name: celery_beat_msg_bot
    command: celery -A core beat --loglevel=info
    restart: always
    depends_on:
      - redis
      - db
      - web
    volumes:
      - ./:/app
    networks:
      - default_network

  aiogram:
    build: .
    container_name: aiogram_msg_bot
    command: bash -c "./manage.py startbot"
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - db
      - web
    volumes:
      - ./:/app
    networks:
      - default_network

networks:
  default_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.21.0/24
  proxy-global-network:
    external: true  # Використовуємо зовнішню мережу

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
#  letsencrypt_volume:
#  certbot_webroot_volume: