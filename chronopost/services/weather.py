import logging
import aiohttp
import asyncio
from datetime import datetime, time
from typing import Dict, List, Optional, Tuple, Any

from aiogram import Bot
from aiogram.types import FSInputFile

from chronopost.utils import clean_tag_message

logger = logging.getLogger("weather_api")


class OpenWeatherClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ OpenWeatherMap API."""

    BASE_URL = "https://api.openweathermap.org/data/2.5/forecast"

    def __init__(self, api_key: str):
        self.api_key = api_key

    async def fetch_weather_data(
        self, coordinates: Tuple[float, float]
    ) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
        logger.info("–ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç %s", coordinates)

        if not self._is_valid_coordinates(coordinates):
            logger.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: %s", coordinates)
            return None

        params = {
            "lat": coordinates[0],
            "lon": coordinates[1],
            "appid": self.api_key,
            "units": "metric",
            "lang": "uk",
        }

        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(
                    url=self.BASE_URL,
                    params=params,
                    timeout=aiohttp.ClientTimeout(total=10),
                ) as response:
                    response.raise_for_status()
                    return await response.json()
            except asyncio.TimeoutError:
                logger.error(
                    "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç %s", coordinates
                )
            except aiohttp.ClientError as error:
                logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–ª—è %s: %s", coordinates, error)

        return None

    @staticmethod
    def _is_valid_coordinates(coordinates: Tuple[float, float]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
        return len(coordinates) == 2 and all(
            isinstance(coord, (float, int)) for coord in coordinates
        )


class WeatherProcessor:
    """–ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏."""

    def __init__(self, *, filter_precipitation: bool = False):
        self.filter_precipitation = filter_precipitation

    @staticmethod
    def has_precipitation(weather_entry: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–∞–¥–∏."""
        return "rain" in weather_entry or "snow" in weather_entry

    def filter_weather_data(self, raw_data: Optional[Dict]) -> List[Dict]:
        """–§—ñ–ª—å—Ç—Ä—É—î –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é –æ–ø–∞–¥—ñ–≤."""

        if not raw_data or "list" not in raw_data:
            return []

        forecasts = raw_data["list"]
        return [
            entry
            for entry in forecasts
            if not self.filter_precipitation or self.has_precipitation(entry)
        ]


class WeatherFormatter:
    """–ö–ª–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ —É –∑—Ä—É—á–Ω–∏–π –≤–∏–≥–ª—è–¥."""

    def __init__(self, *, include_today_only: bool = False):
        self.include_today_only = include_today_only

    def format_weather_report(self, forecasts: List[Dict]) -> List[str]:
        """–§–æ—Ä–º–∞—Ç—É—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ —É —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–∏–≥–ª—è–¥, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏."""

        logger.debug("–ü–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è %d –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤", len(forecasts))
        return [
            formatted
            for entry in forecasts
            if (
                formatted := self._format_forecast(
                    entry, self.include_today_only
                )
            )
        ]

    def _format_forecast(
        self, entry: Dict[str, Any], include_today_only: bool = False
    ) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –æ–¥–∏–Ω –∑–∞–ø–∏—Å –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.

        Args:
            entry: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑—É. –û—á—ñ–∫—É—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤ 'dt', 'main', 'weather'.
            include_today_only: –Ø–∫—â–æ True, –≤–∫–ª—é—á–∞—î –ª–∏—à–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å.

        Returns:
            –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, —è–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä—É.
        """

        forecast_date_time = datetime.fromtimestamp(entry.get("dt", 0))

        if include_today_only and not self._is_within_today_range(
            forecast_date_time
        ):
            return ""

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –≤ –∑—Ä—É—á–Ω–∏–π –≤–∏–≥–ª—è–¥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ include_today_only
        if include_today_only:
            forecast_time = forecast_date_time.time().strftime("%H:%M")
        else:
            forecast_time = forecast_date_time.strftime("%Y-%m-%d %H:%M")

        precipitation_info = self._extract_precipitation(entry)
        weather_description = (
            entry.get("weather", [{}])[0]
            .get("description", "–Ω–µ–º–∞—î –æ–ø–∏—Å—É")
            .capitalize()
        )
        temperature = round(float(entry.get("main", {}).get("temp", "N/A")), 1)

        return (
            f"üïó <b>{forecast_time}</b> :\n"
            f"    üî∏ {weather_description}"
            f"üå° {temperature}¬∞C "
            f"‚òÇÔ∏è {precipitation_info or '–Ω–µ–º–∞—î'}\n"
        )

    @staticmethod
    def _is_within_today_range(forecast_time: datetime) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è —É –º–µ–∂–∞—Ö 08:00-21:00."""
        today = datetime.today().date()
        today_8am = datetime.combine(today, time(8, 0)).timestamp()
        today_9pm = datetime.combine(today, time(21, 0)).timestamp()
        return (
            today == forecast_time.date()
            and today_8am <= forecast_time.timestamp() <= today_9pm
        )

    @staticmethod
    def _extract_precipitation(entry: Dict) -> str:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–∞–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ç–µ–∫—Å—Ç—É."""
        precipitation = []
        for precip_type, label in {"rain": "–î–æ—â", "snow": "–°–Ω—ñ–≥"}.items():
            if precip_data := entry.get(precip_type):
                precipitation.append(f"{label}: {precip_data.get('3h', 0)} –º–º")
        return ", ".join(precipitation)


class TelegramNotifier:
    """–ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Telegram"""

    def __init__(self, bot: Bot, chat_id: int | str):
        self.bot = bot
        self.chat_id = chat_id

    async def send_message(self, text: str, poster=None):
        """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""

        logger.info("–°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É %s", self.chat_id)

        try:
            async with self.bot as bot:
                if poster:
                    photo_file = FSInputFile(poster.path)
                    await self.bot.send_chat_action(
                        chat_id=self.chat_id, action="upload_photo"
                    )
                    await self.bot.send_photo(
                        chat_id=self.chat_id,
                        photo=photo_file,
                        caption=clean_tag_message(text[:1024]),
                    )
                else:
                    await self.bot.send_chat_action(
                        chat_id=self.chat_id, action="typing"
                    )
                    await bot.send_message(
                        chat_id=self.chat_id, text=clean_tag_message(text[:4096])
                    )
            logger.info("Message sent to chat %s", self.chat_id)
        except Exception as e:
            logger.error("Failed to send message: %s", e)
